///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SCO_Test.Recording_Modules.AssitanceRecordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The test_approvalNeededNo recording.
    /// </summary>
    [TestModule("7e68dc88-87b3-4a16-8611-313782f7f24f", ModuleType.Recording, 1)]
    public partial class test_approvalNeededNo : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::SCO_Test.SCO_TestRepository repository.
        /// </summary>
        public static global::SCO_Test.SCO_TestRepository repo = global::SCO_Test.SCO_TestRepository.Instance;

        static test_approvalNeededNo instance = new test_approvalNeededNo();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public test_approvalNeededNo()
        {
            NewVariable = "1m";
            NewVariable1 = "1.5m";
            NewVariable2 = "1.1m";
            N1_3m = "1.1m";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static test_approvalNeededNo Instance
        {
            get { return instance; }
        }

#region Variables

        string _NewVariable;

        /// <summary>
        /// Gets or sets the value of variable NewVariable.
        /// </summary>
        [TestVariable("1fb80869-afc8-466d-b5f1-279f1dfa2e93")]
        public string NewVariable
        {
            get { return _NewVariable; }
            set { _NewVariable = value; }
        }

        string _NewVariable1;

        /// <summary>
        /// Gets or sets the value of variable NewVariable1.
        /// </summary>
        [TestVariable("8526367f-be0e-4066-8659-d2f1e2431ab8")]
        public string NewVariable1
        {
            get { return _NewVariable1; }
            set { _NewVariable1 = value; }
        }

        string _NewVariable2;

        /// <summary>
        /// Gets or sets the value of variable NewVariable2.
        /// </summary>
        [TestVariable("407d4613-c4cb-4acf-8088-cddd16b4567a")]
        public string NewVariable2
        {
            get { return _NewVariable2; }
            set { _NewVariable2 = value; }
        }

        string _N1_3m;

        /// <summary>
        /// Gets or sets the value of variable N1_3m.
        /// </summary>
        [TestVariable("84a1f73a-350e-4c0f-afe7-6d7cd74e4950")]
        public string N1_3m
        {
            get { return _N1_3m; }
            set { _N1_3m = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'NCRNEXTGENUI2.InstructionBox' at Center.", repo.NCRNEXTGENUI2.InstructionBoxInfo, new RecordItemIndex(0));
            repo.NCRNEXTGENUI2.InstructionBox.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for time from variable $N1_3m.", new RecordItemIndex(1));
            Delay.Duration(Duration.Parse(N1_3m), false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Would you like to continue with your purchase?') on item 'NCRNEXTGENUI2.SomeContainer.Instructions'.", repo.NCRNEXTGENUI2.SomeContainer.InstructionsInfo, new RecordItemIndex(2));
            Validate.AttributeEqual(repo.NCRNEXTGENUI2.SomeContainer.InstructionsInfo, "Text", "Would you like to continue with your purchase?");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'NCRNEXTGENUI2.SomeContainer.TextNo' at Center.", repo.NCRNEXTGENUI2.SomeContainer.TextNoInfo, new RecordItemIndex(3));
            repo.NCRNEXTGENUI2.SomeContainer.TextNo.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Thank you for using NCR SelfServ Checkout.') on item 'NCRNEXTGENUI2.InstructionTextArea1'.", repo.NCRNEXTGENUI2.InstructionTextArea1Info, new RecordItemIndex(4));
            Validate.AttributeEqual(repo.NCRNEXTGENUI2.InstructionTextArea1Info, "Text", "Thank you for using NCR SelfServ Checkout.");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 10s.", new RecordItemIndex(5));
            Delay.Duration(10000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='Press Here or           Scan Item') on item 'NCRNEXTGENUI2.PressHereOrScanItem'.", repo.NCRNEXTGENUI2.PressHereOrScanItemInfo, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.NCRNEXTGENUI2.PressHereOrScanItemInfo, "Text", "Press Here or           Scan Item");
            Delay.Milliseconds(100);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
